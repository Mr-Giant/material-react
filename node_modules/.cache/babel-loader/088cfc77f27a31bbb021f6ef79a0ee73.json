{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zhangfan/dav/Takeaway/material-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getTemp),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watch);\n\nimport { fork, put, takeLatest } from 'redux-saga/effects';\nimport { tempSetInfo, tempGetInfo } from './action';\n\nfunction getTemp() {\n  var result;\n  return _regeneratorRuntime.wrap(function getTemp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          result = 'temp';\n          _context.next = 3;\n          return put(tempSetInfo(result));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watch() {\n  return _regeneratorRuntime.wrap(function watch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(tempGetInfo, getTemp);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default [fork(watch)];","map":{"version":3,"sources":["/Users/zhangfan/dav/Takeaway/material-dashboard-react/src/store/modules/theme/saga.js"],"names":["getTemp","watch","fork","put","takeLatest","tempSetInfo","tempGetInfo","result"],"mappings":";;oDAOUA,O;qDAKAC,K;;AAZV,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,SACEC,WADF,EAEEC,WAFF,QAGO,UAHP;;AAKA,SAAUN,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACQO,UAAAA,MADR,GACiB,MADjB;AAAA;AAEE,iBAAMJ,GAAG,CAACE,WAAW,CAACE,MAAD,CAAZ,CAAT;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUN,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAACE,WAAD,EAAcN,OAAd,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,CAACE,IAAI,CAACD,KAAD,CAAL,CAAf","sourcesContent":["import { fork, put, takeLatest } from 'redux-saga/effects'\n\nimport {\n  tempSetInfo,\n  tempGetInfo,\n} from './action'\n\nfunction* getTemp() {\n  const result = 'temp'\n  yield put(tempSetInfo(result))\n}\n\nfunction* watch() {\n  yield takeLatest(tempGetInfo, getTemp)\n}\n\nexport default [fork(watch)]\n\n"]},"metadata":{},"sourceType":"module"}