{"ast":null,"code":"import _classCallCheck from \"/Users/zhangfan/dav/Takeaway/material-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zhangfan/dav/Takeaway/material-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/zhangfan/dav/Takeaway/material-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/zhangfan/dav/Takeaway/material-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/zhangfan/dav/Takeaway/material-dashboard-react/src/hoc/HocVerifyLogin.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { getLoginState } from '../store/modules/account/selector';\nimport { namespace } from './reducer';\n/**\n * 验证登录状态的的高阶组件\n * 1.登录成功后setLogin把登录状态暂存\n * 2.每次路由切换都会进入这个高阶组件进行验证登录是否过期，先获取getLoginState，融合到HocVerifyLogin，\n *  若过期返回登录页面(类式vue路由的before验证)\n * 3.严格验证\n */\n\nexport default (function (WrappedComponent) {\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      isLogin: getLoginState(state)\n    };\n  };\n\n  return connect(mapStateToProps)( /*#__PURE__*/function (_Component) {\n    _inherits(HocVerifyLogin, _Component);\n\n    var _super = _createSuper(HocVerifyLogin);\n\n    function HocVerifyLogin() {\n      _classCallCheck(this, HocVerifyLogin);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(HocVerifyLogin, [{\n      key: \"render\",\n      value: function render() {\n        console.error(namespace);\n        console.log(this.props, 'HOC_Verify_Login');\n        var isLogin = this.props.isLogin;\n        if (!isLogin) return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/login\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }\n        });\n        return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 9\n          }\n        }));\n      }\n    }]);\n\n    return HocVerifyLogin;\n  }(Component));\n});","map":{"version":3,"sources":["/Users/zhangfan/dav/Takeaway/material-dashboard-react/src/hoc/HocVerifyLogin.jsx"],"names":["React","Component","connect","Redirect","getLoginState","namespace","WrappedComponent","mapStateToProps","state","isLogin","console","error","log","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA;;;;;;;;AAOA,gBAAe,UAAAC,gBAAgB,EAAI;AACjC,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,WAAK;AAChCC,MAAAA,OAAO,EAAEL,aAAa,CAACI,KAAD;AADU,KAAL;AAAA,GAA7B;;AAGA,SAAON,OAAO,CAACK,eAAD,CAAP;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BACI;AACPG,QAAAA,OAAO,CAACC,KAAR,CAAcN,SAAd;AACAK,QAAAA,OAAO,CAACE,GAAR,CAAY,KAAKC,KAAjB,EAAwB,kBAAxB;AAFO,YAGCJ,OAHD,GAGa,KAAKI,KAHlB,CAGCJ,OAHD;AAIP,YAAI,CAACA,OAAL,EAAc,oBAAQ,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACd,4BACE,oBAAC,gBAAD,oBAAsB,KAAKI,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAGD;AATI;;AAAA;AAAA,IAAsDZ,SAAtD,EAAP;AAWD,CAfD","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { getLoginState } from '../store/modules/account/selector'\nimport { namespace } from './reducer'\n/**\n * 验证登录状态的的高阶组件\n * 1.登录成功后setLogin把登录状态暂存\n * 2.每次路由切换都会进入这个高阶组件进行验证登录是否过期，先获取getLoginState，融合到HocVerifyLogin，\n *  若过期返回登录页面(类式vue路由的before验证)\n * 3.严格验证\n */\nexport default WrappedComponent => {\n  const mapStateToProps = state => ({\n    isLogin: getLoginState(state),\n  })\n  return connect(mapStateToProps)(class HocVerifyLogin extends Component {\n    render() {\n      console.error(namespace);\n      console.log(this.props, 'HOC_Verify_Login')\n      const { isLogin } = this.props\n      if (!isLogin) return (<Redirect to='/login' />)\n      return (\n        <WrappedComponent {...this.props} />\n      )\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}